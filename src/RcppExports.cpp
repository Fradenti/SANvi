// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// main_vb_cam_cpp
Rcpp::List main_vb_cam_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, double const a_tilde, double const b_tilde, double const a_bar, double const b_bar, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _SANvi_main_vb_cam_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP a_tildeSEXP, SEXP b_tildeSEXP, SEXP a_barSEXP, SEXP b_barSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< double const >::type a_tilde(a_tildeSEXP);
    Rcpp::traits::input_parameter< double const >::type b_tilde(b_tildeSEXP);
    Rcpp::traits::input_parameter< double const >::type a_bar(a_barSEXP);
    Rcpp::traits::input_parameter< double const >::type b_bar(b_barSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_cam_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, a_tilde, b_tilde, a_bar, b_bar, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}
// main_vb_cam_CP_cpp
Rcpp::List main_vb_cam_CP_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, arma::colvec conc_hyper, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _SANvi_main_vb_cam_CP_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP conc_hyperSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type conc_hyper(conc_hyperSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_cam_CP_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, conc_hyper, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}
// main_vb_fSAN_cpp
Rcpp::List main_vb_fSAN_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, double alpha_bar, double beta_bar, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _SANvi_main_vb_fSAN_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP alpha_barSEXP, SEXP beta_barSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< double >::type alpha_bar(alpha_barSEXP);
    Rcpp::traits::input_parameter< double >::type beta_bar(beta_barSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_fSAN_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, alpha_bar, beta_bar, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}
// main_vb_fiSAN_cpp
Rcpp::List main_vb_fiSAN_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, double const a_tilde, double const b_tilde, double beta_bar, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _SANvi_main_vb_fiSAN_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP a_tildeSEXP, SEXP b_tildeSEXP, SEXP beta_barSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< double const >::type a_tilde(a_tildeSEXP);
    Rcpp::traits::input_parameter< double const >::type b_tilde(b_tildeSEXP);
    Rcpp::traits::input_parameter< double >::type beta_bar(beta_barSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_fiSAN_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, a_tilde, b_tilde, beta_bar, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}
// main_vb_fiSAN_CP_cpp
Rcpp::List main_vb_fiSAN_CP_cpp(arma::field<arma::colvec> Y_grouped, int const L, int const K, int const J, arma::field<arma::mat> XI_ijl, arma::mat RHO_jk, arma::colvec Nj, double m0, double k0, double a0, double b0, arma::colvec ml, arma::colvec kl, arma::colvec al, arma::colvec bl, arma::colvec conc_hyper, double beta_bar, double epsilon, int maxSIM, bool verbose);
RcppExport SEXP _SANvi_main_vb_fiSAN_CP_cpp(SEXP Y_groupedSEXP, SEXP LSEXP, SEXP KSEXP, SEXP JSEXP, SEXP XI_ijlSEXP, SEXP RHO_jkSEXP, SEXP NjSEXP, SEXP m0SEXP, SEXP k0SEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP mlSEXP, SEXP klSEXP, SEXP alSEXP, SEXP blSEXP, SEXP conc_hyperSEXP, SEXP beta_barSEXP, SEXP epsilonSEXP, SEXP maxSIMSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::field<arma::colvec> >::type Y_grouped(Y_groupedSEXP);
    Rcpp::traits::input_parameter< int const >::type L(LSEXP);
    Rcpp::traits::input_parameter< int const >::type K(KSEXP);
    Rcpp::traits::input_parameter< int const >::type J(JSEXP);
    Rcpp::traits::input_parameter< arma::field<arma::mat> >::type XI_ijl(XI_ijlSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type RHO_jk(RHO_jkSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type Nj(NjSEXP);
    Rcpp::traits::input_parameter< double >::type m0(m0SEXP);
    Rcpp::traits::input_parameter< double >::type k0(k0SEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type ml(mlSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type kl(klSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type al(alSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type bl(blSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type conc_hyper(conc_hyperSEXP);
    Rcpp::traits::input_parameter< double >::type beta_bar(beta_barSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type maxSIM(maxSIMSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(main_vb_fiSAN_CP_cpp(Y_grouped, L, K, J, XI_ijl, RHO_jk, Nj, m0, k0, a0, b0, ml, kl, al, bl, conc_hyper, beta_bar, epsilon, maxSIM, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_SANvi_main_vb_cam_cpp", (DL_FUNC) &_SANvi_main_vb_cam_cpp, 22},
    {"_SANvi_main_vb_cam_CP_cpp", (DL_FUNC) &_SANvi_main_vb_cam_CP_cpp, 19},
    {"_SANvi_main_vb_fSAN_cpp", (DL_FUNC) &_SANvi_main_vb_fSAN_cpp, 20},
    {"_SANvi_main_vb_fiSAN_cpp", (DL_FUNC) &_SANvi_main_vb_fiSAN_cpp, 21},
    {"_SANvi_main_vb_fiSAN_CP_cpp", (DL_FUNC) &_SANvi_main_vb_fiSAN_CP_cpp, 20},
    {NULL, NULL, 0}
};

RcppExport void R_init_SANvi(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
